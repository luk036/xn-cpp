#include <doctest/doctest.h>  // for TestCase, TEST_CASE

#include <algorithm>                              // for for_each
#include <boost/graph/adjacency_list.hpp>         // for vecS (ptr only)
#include <boost/graph/detail/adjacency_list.hpp>  // for adj_list_gen<>::config
#include <boost/graph/graph_selectors.hpp>        // for bidirectionalS
#include <boost/graph/graph_traits.hpp>           // for graph_traits, graph...
#include <boost/iterator/iterator_facade.hpp>     // for operator!=, iterato...
#include <boost/pending/property.hpp>             // for no_property
#include <boost/range/irange.hpp>                 // for integer_iterator
#include <py2cpp/nx2bgl.hpp>                      // for grAdaptor, AtlasView
// #include <iostream> // for std::cout
#include <type_traits>  // for move
#include <utility>      // for pair

// using namespace boost;
template <class grAdaptor> struct exercise_vertex {
    //...
    using Vertex = typename boost::graph_traits<grAdaptor>::vertex_descriptor;

    explicit exercise_vertex(grAdaptor& g_) : g(g_) {}
    //...
    grAdaptor& g;

    auto operator()(const Vertex& v) const -> void {
        // typedef boost::graph_traits<Graph> GraphTraits;
        // typename boost::property_map<Graph, boost::vertex_index_t>::type
        // auto index = boost::get(boost::vertex_index, g);

        // std::cout << "out-edges: ";
        // typename GraphTraits::out_edge_iterator out_i, out_end;
        // typename GraphTraits::edge_descriptor e;
        for (auto&& e : g.neighbors(v)) {
            static_assert(sizeof e >= 0, "unused");
            // auto [src, targ] = g.end_points(e);
            // std::cout << "(" << index[src] << "," << index[targ] << ") ";
        }
        // std::cout << std::endl;
    }
    //...
};

TEST_CASE("Test Boost") {
    // create a typedef for the Graph type
    using Graph = boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS>;

    // Make convenient labels for the vertices
    enum { A, B, C, D, E, N };
    const auto num_vertices = N;
    // const char *name = "ABCDE";

    // writing out the edges in the graph
    using Edge = std::pair<int, int>;
    Edge edge_array[]
        = {Edge(A, B), Edge(A, D), Edge(C, A), Edge(D, C), Edge(C, E), Edge(B, D), Edge(D, E)};
    const auto num_edges = sizeof(edge_array) / sizeof(edge_array[0]);

    // declare a graph object
    Graph g(num_vertices);
    py::grAdaptor<Graph> gra(std::move(g));
    using Vertex = typename boost::graph_traits<Graph>::vertex_descriptor;
    // using edge_t = typename boost::graph_traits<Graph>::edge_descriptor;

    // add the edges to the graph object
    for (auto i = 0U; i != num_edges; ++i) {
        gra.add_edge(edge_array[i].first, edge_array[i].second);
    }

    // typedef graph_traits<Graph>::vertex_descriptor Vertex;

    // get the property map for vertex indices
    // typedef property_map<Graph, vertex_index_t>::type IndexMap;
    // auto index = boost::get(boost::vertex_index, gra);

    // std::cout << "vertices(g) = ";
    // typedef graph_traits<Graph>::vertex_iterator vertex_iter;
    // std::pair<vertex_iter, vertex_iter> vp;
    for (Vertex&& v : gra) {
        static_assert(sizeof v >= 0, "unused");
        // std::cout << index[v] << " ";
    }
    // std::cout << std::endl;

    // std::cout << "edges(g) = ";
    // graph_traits<Graph>::edge_iterator ei, ei_end;
    // for (auto&& e : gra.edges())
    //     std::cout << "(" << index[boost::source(e, gra)] << ","
    //               << index[boost::target(e, gra)] << ") ";
    // std::cout << std::endl;

    std::for_each(boost::vertices(gra).first, boost::vertices(gra).second,
                  exercise_vertex<py::grAdaptor<Graph>>(gra));
}